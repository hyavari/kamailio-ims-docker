# Kamailio SIP Server
include_file "icscf.cfg"

####### Defined Values #########
# *** Value defines - IDs used later in config
# - flags
#	FLT_ - per transaction (message) flags
#	FLB_ - per branch flags
#!define FLT_CAPTURE 1

####### Global Parameters #########
#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=2
#!endif

log_facility=LOG_LOCAL0

# log level for memory debugging
memdbg=5
memlog=5

# maximum loops that can be done within a “while” block
max_while_loops=1000

# Locks all pages into memory unswappable
mlock_pages=yes

# Tries to pre-fault all the shared memory, before starting. When "on", start 
# time will increase, but combined with mlock_pages will guarantee ser will get 
# all its memory from the beginning (no more kswapd slow downs)
shm_force_alloc=yes

# SRV load balancing
dns_srv_lb=yes

# If DNS lookup fails, it will retry it for ipv6 (AAAA record)
dns_try_ipv6=yes

# DNS-Based failover
use_dns_failover=yes

# DNS cache
use_dns_cache=off

# Query NAPTR-Records
dns_try_naptr=no

user_agent_header="User-Agent: IMS I-CSCF"
server_header="Server: IMS I-CSCF"

# forking processes
fork=yes

# number of children for UDP (default is 4)
#!ifdef UDP_PROCESSES
children=UDP_PROCESSES
#!else
children=4
#!endif

# number of children for TCP (default is 4)
#!ifdef TCP_PROCESSES
tcp_children=TCP_PROCESSES
#!else
tcp_children=4
#!endif

# life time of TCP connection when there is no traffic
# - a bit higher than registration expires to cope with UA behind NAT
tcp_connection_lifetime=3615

# Enable SIP outbound TCP keep-alive using PING-PONG (CRLFCRLF - CRLF).
tcp_crlf_ping=yes

tcp_accept_no_cl=yes
tcp_rd_buf_size=16384

# disable the auto discovery of local aliases
auto_aliases=no

system.shutdownmode = 0 desc "System shutdown mode"
system.service = "Interrogating-CSCF" desc "Function of this server"

####### Modules Section ########
# set paths to location of modules
mpath="/usr/local/kamailio/lib64/kamailio/modules/"

# basic modules
loadmodule "kex"
loadmodule "tm"
loadmodule "tmx"
loadmodule "sl"
loadmodule "rr"
loadmodule "pv"
loadmodule "maxfwd"
loadmodule "textops"
loadmodule "siputils"
loadmodule "sanity"
loadmodule "ctl"
loadmodule "cfg_rpc"
loadmodule "xlog"

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

# IMS ICSCF modules
loadmodule "cdp.so"
loadmodule "cdp_avp.so"
loadmodule "ims_icscf.so"

#!ifdef CAPTURE_NODE
loadmodule "siptrace.so"
#!endif

####### Setting Module Specific Parameters ########

# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 10sec
modparam("tm", "fr_timer", 10000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)
# Don't reply automatically with "100 Trying"
modparam("tm", "auto_inv_100", 0)

# -- rr params --
# add value to ;lr param to make some broken UAs happy
modparam("rr", "enable_full_lr", 1)

# ----- ctl params -----
modparam("ctl", "binrpc", "unix:/var/run/kamailio/kamailio_ctl")

# ----- icscf params -----
modparam("ims_icscf","cxdx_dest_realm", NETWORKNAME)

# -- cdp params --
modparam("cdp", "config_file", "/usr/local/kamailio/etc/kamailio/icscf/icscf.xml")

#!ifdef FALLBACK_AUTH
# Route which is executed, in case HSS returned "User-Unknown" on UAR request
modparam("ims_icscf","route_uar_user_unknown", "uar_term_user_unknown")
#!endif

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "mod_hash_size", 5)
modparam("debugger", "mod_level_mode", 1)
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "mod_level", "tm=3")
modparam("debugger", "mod_level", "cdp=3")
modparam("debugger", "mod_level", "ims_icscf=3")
#!endif

#!ifdef CAPTURE_NODE
# Destination, where to send the traffic
modparam("siptrace", "duplicate_uri", CAPTURE_NODE)
# Trace all traffic
modparam("siptrace", "trace_on", 1)
modparam("siptrace", "trace_to_database", 0)
modparam("siptrace", "trace_flag", FLT_CAPTURE)
modparam("siptrace", "hep_mode_on", 1)
#!endif

####### Routing Logic ########
# Main SIP request routing logic
route{
	xlog("I-CSCF >>>>>>>>> $rm $ru ($fu => $tu ($si:$sp) to $tu, $ci)\n");

	# per request initial checks
	route(REQINIT);

	if (is_method("REGISTER")) {
		route(register);
	}

	if (is_method("NOTIFY") && search("^(Event|o)([ \t]*):([ \t]*)reg")) {
		if (!t_relay()) {
			sl_reply_error();
		}
		exit;
	}

	if (is_method("INVITE|SUBSCRIBE|MESSAGE|INFO|PUBLISH|CANCEL")) {
		route(initial_request);
	} else {
		# Shouldn't get here unless missconfigured (add more methods as initial) or
		# somebody is routing unknown messages
		append_to_reply("Allow: INVITE,SUBSCRIBE,MESSAGE,INFO,PUBLISH,CANCEL\r\n");
		send_reply("406","Initial Request Method not allowed at the I-CSCF");
		break;
	}
}

######################################################################
# Helper routes (Basic-Checks)
######################################################################
# Per SIP request initial checks
route[REQINIT] {
    # Reply to OPTIONS:
	if (is_method("OPTIONS") && (uri==myself)) {
		options_reply();
		exit;
	}

	$var(used) = 1 - ($stat(free_size) / $stat(total_size));
	xlog("L_DBG", "Mem: Total $stat(total_size), Free $stat(free_size) [$var(used)% used]\n");

	if ($var(used) > 95) {
		send_reply("503", "Server overloaded");
		exit;
	}

	# Trace this message
#!ifdef CAPTURE_NODE
	sip_trace();	
	setflag(FLT_CAPTURE);
#!endif
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(!sanity_check("1511", "7")) {
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}

	# Check for shutdown mode:
	if (!has_totag() && ($sel(cfg_get.system.shutdownmode) > 0)) {
		send_reply("503", "Server shutting down");
		exit;
	}
	
	# Ignore Re-Transmits:
	if (t_lookup_request()) {
		exit;
	}

	if (is_method("INVITE|REGISTER")) {
		send_reply("100", "Trying");
	}
}

######################################################################
# Handling of REGISTER requests
######################################################################
route[register]
{
	t_set_fr(5000, 5000); 
	# first check if we have an S-CSCF list
	if (I_scscf_select("0")) {
		# there is an S-CSCF list - no need to do a UAR
		t_on_reply("register_reply");
		t_on_failure("register_failure");

		if (!t_relay()) {
			send_reply("500","Error forwarding towards S-CSCF");
		}
       } else {
		# no S-CSCF list therefore must do UAR
		# Drop the list of SCSCFs for this request - failed I_scscf_select call
		I_scscf_drop();
		# Do an asynchronous UAR:
		# 0=REG/DEREG; 1=REG+Capabilities
        if (!I_perform_user_authorization_request("REG_UAR_REPLY","0")) {
			send_reply("500", "Error in Request");
		}
	}
	exit;
}

route[REG_UAR_REPLY]
{
    xlog("$$avp(s:uaa_return_code) = $avp(s:uaa_return_code)\n");
    # this is async so to know status we have to check the reply avp
    switch ($avp(s:uaa_return_code)){
        # success
        case 1:
            if (I_scscf_select("0")){
                t_on_failure("register_failure");
                t_on_reply("register_reply");
                # now relay to appropriate SCSCF
                if (!t_relay()) {
                    t_reply("500", "Error forwarding to SCSCF");
                }
            } else {
                # select failed
                I_scscf_drop();
                t_reply("500", "Server error on SCSCF Select (UAR)");
            }
            break;
        # failure
        case -1:
            xlog("L_ERR", "UAR failure - error response sent from module\n");
            break;
        # error
        case -2:
            xlog("L_ERR", "UAR error - sending error response now\n");
            t_reply("500", "UAR failed");
            break;
        default:
            xlog("L_ERR", "Unknown return code from UAR, value is [$avp(s:uaa_return_code)]\n");
            t_reply("500", "Unknown response code from UAR");
            break;
    }
}

######################################################################
# Replies to REGISTER requests 
######################################################################
onreply_route[register_reply]
{
	xlog("L_DBG", "Enter register reply block");
	
    if (!t_check_status("(408)|(480)")) {
		if (!t_check_status("(401)")){
			xlog("L_DBG", "dropping scscf list on register failure");
			I_scscf_drop();
		} else {
			xlog("L_DBG", "This is a 401 - keep scscf list to do optimisation");
		}
	}

	break;
}

######################################################################
# Failed REGISTERs
######################################################################
failure_route[register_failure]
{
	if (t_branch_timeout() || t_check_status("([5-6][0-9][0-9])")){
		if (I_scscf_select("1")) {
			t_on_reply("register_reply");
			t_on_failure("register_failure");

			if (!t_relay()) {
				t_reply("500","Error forwarding towards next S-CSCF");
				break;
			}

			break;
		} else {
			t_reply("500", "Server error on UAR select next S-CSCF");
			break;
		}
	} else {
		if (!t_check_status("(401)")){
			xlog("L_DBG", "dropping scscf list on register failure");
			I_scscf_drop();
		} else {
			xlog("L_DBG", "This is a 401 - keep scscf list to do optimisation");
		}

		break;
	}
}

######################################################################
# Initial requests
######################################################################
route[initial_request]
{
	xlog("$$ru => $ru\n");
	I_perform_location_information_request("LIR_REPLY", "0");
}

route[LIR_REPLY] {
	if ($avp(lia_return_code) == 1) {
		if (I_scscf_select("0")) {
			xlog("L_DBG", "ru = $ru, du = $du\n");
			t_on_reply("initial_request_reply");
			t_on_failure("initial_request_failure");

			if (!t_relay()) {
				t_reply("500","Error forwarding towards S-CSCF");
				break;
			}

			break;
		} else {
			xlog("L_DBG", "dropping scscf list on initial request");
			I_scscf_drop();
			t_reply("500", "Server error on LIR select S-CSCF");
			break;
		}
	} else {
		t_reply("500", "Server error on LIR");
		break;
	}

	break;
}

######################################################################
# Replies to initial requests
######################################################################
onreply_route[initial_request_reply]
{
	xlog("L_DBG", "Enter initial request request block");

	if (!t_check_status("(408)")){
		xlog("L_DBG", "dropping scscf list on initial request reply");
		I_scscf_drop();
	}

	break;
}

######################################################################
# Failed initial requests
######################################################################
failure_route[initial_request_failure]
{
	xlog("L_DBG", "Enter initial request failure block");

	if (t_check_status("(408)")){
		xlog("L_DBG", "Got a failure for initial request");

		if (I_scscf_select("1")) {
			t_on_reply("initial_request_reply");
			t_on_failure("initial_request_failure");

			if (!t_relay()) {
				t_reply("500","Error forwarding towards next S-CSCF");
				break;
			}

			break;
		} else {
			t_reply("500", "Server error on LIR select next S-CSCF");
			break;
		}
	} else {
		xlog("L_DBG", "dropping scscf list on  initial request failure");
		I_scscf_drop();
	}

	break;
}

#!ifdef FALLBACK_AUTH
######################################################################
# HSS returned "User-Unknown" on UAR request \
# try to send it to any S-CSCF for authentication
######################################################################
route[uar_term_user_unknown]
{
	$rd = "scscf."+NETWORKNAME;
	t_on_reply("register_reply");
	t_on_failure("register_failure");

	if (!t_relay()) {
		t_reply("500","Error forwarding towards S-CSCF");
		break;
	}

	break;	
}
#!endif
