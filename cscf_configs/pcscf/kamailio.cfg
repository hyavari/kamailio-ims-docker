# Kamailio SIP Server
import_file "pcscf.cfg"

####### Defined Values #########
# *** Value defines - IDs used later in config
#!define RR_CUSTOM_USER_AVP "i:5"
#!define DLG_TIMEOUT_AVP "i:6"
#!define FLT_MOBILE_ORIG 1
#!define FLT_DIALOG 2
#!define FLT_NAT 3
#!define FLT_RTP 4
#!define FLT_CAPTURE 5

####### Global Parameters #########
#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=2
#!endif

log_facility=LOG_LOCAL0

# log level for memory debugging
memdbg=5
memlog=5

# maximum loops that can be done within a “while” block
max_while_loops=1000

# Locks all pages into memory unswappable
mlock_pages=yes

# Tries to pre-fault all the shared memory, before starting. When "on", start 
# time will increase, but combined with mlock_pages will guarantee ser will get 
# all its memory from the beginning (no more kswapd slow downs)
shm_force_alloc=yes

# SRV load balancing
dns_srv_lb=yes

# If DNS lookup fails, it will retry it for ipv6 (AAAA record)
dns_try_ipv6=yes

# DNS-Based failover
use_dns_failover=yes

# Query NAPTR-Records
dns_try_naptr=no

user_agent_header="User-Agent: IMS Proxy-CSCF"
server_header="Server: IMS Proxy-CSCF"

# forking processes
fork=yes

# number of children for UDP (default is 8)
#!ifdef UDP_PROCESSES
children=UDP_PROCESSES
#!else
children=8
#!endif

# number of children for TCP (default is 8)
#!ifdef TCP_PROCESSES
tcp_children=TCP_PROCESSES
#!else
tcp_children=8
#!endif

# life time of TCP connection when there is no traffic
# - a bit higher than registration expires to cope with UA behind NAT
tcp_connection_lifetime=3615

# Enable SIP outbound TCP keep-alive using PING-PONG (CRLFCRLF - CRLF).
tcp_crlf_ping=yes

tcp_accept_no_cl=yes
tcp_rd_buf_size=16384

# disable the auto discovery of local aliases
auto_aliases=no

system.shutdownmode = 0 desc "System shutdown mode"
system.service = "Proxy-CSCF" desc "Function of the Server"

####### Modules Section ########
# set paths to location of modules
mpath="/usr/local/kamailio/lib64/kamailio/modules/"

# basic modules
loadmodule "kex"
loadmodule "tm"
loadmodule "tmx"
loadmodule "sl"
loadmodule "rr"
loadmodule "pv"
loadmodule "maxfwd"
loadmodule "textops"
loadmodule "textopsx"
loadmodule "siputils"
loadmodule "sanity"
loadmodule "ctl"
loadmodule "cfg_rpc"
loadmodule "xlog"
loadmodule "auth"
loadmodule "path"
loadmodule "statistics"
loadmodule "uac"
loadmodule "sdpops"
loadmodule "htable"

#!ifdef WITH_DEBUG
loadmodule "debugger"
#!endif

#!ifdef WITH_ANTIFLOOD
loadmodule "pike"
#!endif

#!ifdef WITH_RTPENGINE
loadmodule "rtpengine"
#!endif

loadmodule "usrloc"
loadmodule "registrar"
loadmodule "nathelper"

# IMS modules
loadmodule "ims_dialog"
loadmodule "ims_usrloc_pcscf"
loadmodule "ims_ipsec_pcscf"
loadmodule "ims_registrar_pcscf"

#!ifdef WITH_RX
loadmodule "cdp"
loadmodule "cdp_avp"
loadmodule "ims_qos"
#!endif

#!ifdef CAPTURE_NODE
loadmodule "siptrace"
#!endif

####### Setting Module Specific Parameters ########
# ----- tm params -----
# auto-discard branches from previous serial forking leg
#modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 3 sec
modparam("tm", "fr_timer", 3000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)

# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 1)
# add a Username to RR-Header
modparam("rr", "add_username", 1)
# Take User from a custom AVP
modparam("rr", "custom_user_avp", "$avp(RR_CUSTOM_USER_AVP)")

modparam("path", "use_received", 1)

# ----- ctl params -----
modparam("ctl", "binrpc", "unix:/run/kamailio/kamailio_ctl")

modparam("uac", "restore_mode", "none")

# -- statistics params --
modparam("statistics", "variable", "register_success")
modparam("statistics", "variable", "register_failed")
modparam("statistics", "variable", "register_time")

#!ifdef WITH_DEBUG
modparam("debugger", "mod_hash_size", 5)
modparam("debugger", "mod_level_mode", 1)
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "mod_level", "rtpengine=3")
modparam("debugger", "mod_level", "textops=3")
modparam("debugger", "mod_level", "tm=3")
modparam("debugger", "mod_level", "ims_registrar_pcscf=3")
modparam("debugger", "mod_level", "ims_usrloc_pcscf=3")
modparam("debugger", "mod_level", "ims_ipsec_pcscf=3")
modparam("debugger", "mod_level", "ims_qos=3")
#!endif

#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)
# ----- htable params -----
# ip ban htable with autoexpire after 5 minutes
modparam("htable", "htable", "ipban=>size=8;autoexpire=300")
modparam("htable", "htable", "failedauth=>size=8;autoexpire=120")
#!endif

modparam("htable", "htable", "contact=>size=8;autoexpire=20")
modparam("htable", "htable", "a=>size=8;autoexpire=20")

#!ifdef WITH_NATPING
modparam("htable", "htable", "natping=>size=8;autoexpire=600000;")
modparam("htable", "htable", "natpingfail=>size=8;autoexpire=600000;")
# ----------------- Settings for RTimer ---------------
# time interval set to 10 seconds
modparam("rtimer", "timer", "name=NATPING;interval=15;mode=1;")
modparam("rtimer", "exec", "timer=NATPING;route=NATPING")
#!endif

#!ifdef WITH_IMS_HDR_CACHE
modparam("htable", "htable", "serviceroutes=>size=16;autoexpire=14400;")
modparam("htable", "htable", "associateduris=>size=16;autoexpire=14400;")
#!endif

#!ifdef WITH_RTPENGINE
modparam("rtpengine", "rtpengine_sock", "1 == udp:localhost:9910")
modparam("rtpengine", "rtpengine_sock", "2 == udp:localhost:9911")
modparam("rtpengine", "setid_avp", "$avp(setid)")
modparam("rtpengine", "extra_id_pv", "$avp(extra_id)")
#!endif

# -- ims_dialog params --
modparam("ims_dialog", "dlg_flag", FLT_DIALOG)
modparam("ims_dialog", "timeout_avp", "$avp(DLG_TIMEOUT_AVP)")
modparam("ims_dialog", "detect_spirals", 0)
modparam("ims_dialog", "profiles_no_value", "orig ; term")
modparam("ims_dialog", "db_mode", 0)

# -- usrloc params --
modparam("ims_usrloc_pcscf", "db_mode", 0)
modparam("ims_usrloc_pcscf", "enable_debug_file", 0)
modparam("ims_usrloc_pcscf", "match_contact_host_port", 1)

#!ifdef WITH_IPSEC
modparam("ims_ipsec_pcscf", "ipsec_listen_addr6", IPSEC_LISTEN_ADDR)
modparam("ims_ipsec_pcscf", "ipsec_client_port", IPSEC_CLIENT_PORT)
modparam("ims_ipsec_pcscf", "ipsec_server_port", IPSEC_SERVER_PORT)
modparam("ims_ipsec_pcscf", "ipsec_max_connections", 1)
modparam("ims_ipsec_pcscf", "ipsec_preferred_ealg", "null")
modparam("htable", "htable", "ipsec_clients=>size=8;autoexpire=600000;")
#!endif

modparam("ims_registrar_pcscf", "is_registered_fallback2ip", 1)
modparam("ims_registrar_pcscf", "ignore_reg_state", 1)
modparam("ims_registrar_pcscf", "ignore_contact_rxport_check", 1)
modparam("ims_registrar_pcscf", "force_icscf_uri", "ICSCF")
modparam("ims_registrar_pcscf", "subscribe_to_reginfo", 0)
modparam("ims_registrar_pcscf", "publish_reginfo", 0)

#!ifdef WITH_RX
# -- CDP params --
modparam("cdp", "config_file", "/usr/local/kamailio/etc/kamailio/pcscf.xml")
# -- diameter_rx params --
modparam("ims_qos", "rx_dest_realm", "NETWORKNAME")
#!endif

#!ifdef CAPTURE_NODE
# Destination, where to send the traffic
modparam("siptrace", "duplicate_uri", CAPTURE_NODE)
# Trace all traffic
modparam("siptrace", "trace_on", 1)
modparam("siptrace", "trace_to_database", 0)
modparam("siptrace", "trace_flag", FLT_CAPTURE)
modparam("siptrace", "hep_mode_on", 1)
#!endif


####### Routing Logic ########
# Main SIP request routing logic
# - processing of any incoming SIP request starts with this route
route {
	xlog("$rm ($fu ($si:$sp) to $tu, $ci)\n");
	# per request initial checks
	route(REQINIT);

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			t_relay();
		}

		exit;
	}

	if (is_method("NOTIFY") && (uri==myself)) {
		route(NOTIFY);
		exit;
	}

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)

	# handle retransmissions
	if(t_precheck_trans()) {
		t_check_trans();
		exit;
	}

	t_check_trans();

	# Check for Re-Transmissions
	t_check_trans();

	if (is_method("UPDATE")) {
		send_reply("403", "Forbidden - Target refresh outside dialog not allowed");
		break;
	}

	if (is_method("BYE|PRACK")) {
		send_reply("403", "Forbidden - Originating subsequent requests outside dialog not allowed");
		break;
	}

	loose_route();


	if ($route_uri =~ "sip:term@.*") {
		handle_ruri_alias();
#!ifdef WITH_RTPENGINE
		if ($dP == "tls") {
			route(ENC_SRTP);
		} else if ($dP == "ws") {
			route(ENC_WS_RTP);
		} else if ($dP == "wss") {
			route(ENC_WSS_RTP);
		} else {
			route(ENC_RTP);
		}
		if ($rc == 1) {
			setflag(FLT_NAT);
		}
#!endif			
		# Handle NAT
		route(NATMANAGE);
		# prepend mo as user for record route
		$avp(RR_CUSTOM_USER_AVP)="mt";
		route(MT);	
	} else {
		force_rport();

		if (is_method("INVITE|SUBSCRIBE|UPDATE|REGISTER")) {
			add_contact_alias();
		}

		setflag(FLT_NAT);

		if (is_method("REGISTER")) {
			route(REGISTER);
			exit;
		}
	
		# prepend mo as user for record route
		$avp(RR_CUSTOM_USER_AVP)="mo";
		# Set Flag for MO:
		setflag(FLT_MOBILE_ORIG);
		# Increase timer for inbound requests, we may have to do failover:
		t_set_fr(120000, 30000);
		route(MO);

		if (is_method("INVITE")) {
#!ifdef WITH_RTPENGINE
			if ($pr == "tls") {
				route(DEC_SRTP);
			} else if ($pr == "ws") {
				route(DEC_WS_RTP);
			} else if ($pr == "wss") {
				route(DEC_WSS_RTP);
			} else {
				route(DEC_RTP);
			}
#!endif
		# Handle NAT
		route(NATMANAGE);
		}
	}

	if (is_method("INVITE|SUBSCRIBE")) {
		# record routing for dialog forming requests (in case they are routed)
		record_route();
	}

	# Forward request:
	route(RELAY);
	exit;
}

# Per SIP request initial checks
route[REQINIT] {
	# Reply to OPTIONS:
	if (is_method("OPTIONS") && (uri==myself)) {
		options_reply();
		exit;
	}

	$var(used) = 1 - ($stat(free_size) / $stat(total_size));
	xlog("L_DBG", "Mem: Total $stat(total_size), Free $stat(free_size) [$var(used)% used]\n");

	if ($var(used) > 95) {
		send_reply("503", "Server overloaded");
		exit;
	}

	# Trace this message
#!ifdef CAPTURE_NODE
	sip_trace();	
	setflag(FLT_CAPTURE);
#!endif

#!ifdef WITH_ANTIFLOOD
	# flood dection from same IP and traffic ban for a while
	# be sure you exclude checking trusted peers, such as pstn gateways
	# - local host excluded (e.g., loop to self)
	if (!has_totag() && (src_ip!=myself) && !ds_is_from_list()) {
		if($sht(ipban=>$si)!=$null) {
			# ip is already blocked
			xlog("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
			xlog("Blocking traffic from $si\n");
			exit;
		}

		if (!pike_check_req()) {
			xlog("L_ALERT", "ALERT: pike blocking $rm from $fu (IP:$si:$sp, $ua)\n");
			xlog("Blocking traffic from $si\n");
			$sht(ipban=>$si) = 1;
			exit;
		}
	}

	if ((uri == myself) && is_method("INVITE|REGISTER")) {
		xlog("L_ALERT", "ALERT: Request to myself: $ru from $fu (IP:$si:$sp, $ua), Blocking\n");
		xlog("Blocking traffic from $si\n");
		$sht(ipban=>$si) = 1;
		exit;
	}
#!endif

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483", "Too Many Hops");
		exit;
	}

	if (!sanity_check("1511", "7")) {
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}

	# Check for shutdown mode:
	if (!has_totag() && ($sel(cfg_get.system.shutdownmode) > 0)) {
		send_reply("503", "Server shutting down");
		exit;
	}

	if (!is_method("REGISTER")) {
        ipsec_forward("location");
    }

	# Ignore Re-Transmits:
	if (t_lookup_request()) {
		exit;
	}

	if (is_method("INVITE|REGISTER")) {
		send_reply("100", "Trying");
	}	
}

route[RELAY] {
	if (!t_relay()) {
		sl_reply_error();
	}

	exit;
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (has_totag()) {
		if (!isdsturiset()) {
			handle_ruri_alias();
		}

		if ( is_method("ACK") && ($sht(contact=>$ci) != $null) ) {
			xlog("Contact of Reply: $sht(contact=>$ci) ($ci)\n");
			$ru = $sht(contact=>$ci);
		}

		# sequential request within a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			if ($route_uri =~ "sip:mt@.*") {
				route(MT_indialog);
			} else {
				route(MO_indialog);
			}

			# Handle NAT
			route(NATMANAGE);

			route(RELAY);
		} else {
			if ( is_method("ACK") ) {
				xlog("Contact of Reply: $T_rpl($ct)\n");
				if ( t_check_trans() ) {
					# no loose-route, but stateful ACK;
					# must be an ACK after a 487
					# or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ... ignore and discard
					exit;
				}
			}
			sl_send_reply("404", "Not here");
		}
		exit;
	}
}

# Notify Route:                                                     #
#####################################################################
route[NOTIFY]
{
	xlog("L_DBG", "IMS: INSIDE NOTIFY\n");
	if (reginfo_handle_notify("location")) {
		send_reply("200", "OK - P-CSCF processed notification");
		break;
	} else {
		t_reply("500", "Error encountered while processing notification");
		break;
	}
}

# NATPING Route:                                                    #
#####################################################################
route[NATPING] {
	route(preload_pcscf);

	sht_iterator_start("nat_iterator", "natping");
	while(sht_iterator_next("nat_iterator")) {
		xlog("OPTIONS to $shtitval(nat_iterator) via $shtitkey(nat_iterator)...\n");
		$uac_req(method) = "OPTIONS";
		$uac_req(ruri) = $shtitval(nat_iterator);
		$uac_req(furi) = PCSCF_URL;
		$uac_req(turi) = $shtitval(nat_iterator);
		$uac_req(ouri) = $shtitkey(nat_iterator); 
		$uac_req(evroute) = 1;
		uac_req_send();	
	}
	sht_iterator_end("nat_iterator");
}

event_route[uac:reply] {
	xlog("request sent to $uac_req(ruri) completed with code: $uac_req(evcode), Type $uac_req(evtype)\n");
	
	if (($uac_req(evtype) != 1) || ($uac_req(evcode) != 200)) {
		if ($sht(natpingfail=>$uac_req(ouri)) == $null) {
			$sht(natpingfail=>$uac_req(ouri)) = 1;
		} else {
			$sht(natpingfail=>$uac_req(ouri)) = $sht(natpingfail=>$uac_req(ouri)) + 1;
		}
		# xlog("  request sent to $uac_req(ruri): Fail Counter is $sht(natpingfail=>$uac_req(ouri))\n");
		if ($sht(natpingfail=>$uac_req(ouri)) > 3) {
			if ($(uac_req(ouri){uri.transport}) == "tcp") {
				$var(alias) = "alias="+$(uac_req(ouri){uri.host})+"~"+$(uac_req(ouri){uri.port})+"~2";
			} else if ($(uac_req(ouri){uri.transport}) == "tls") {
				$var(alias) = "alias="+$(uac_req(ouri){uri.host})+"~"+$(uac_req(ouri){uri.port})+"~3";
			} else {
				$var(alias) = "alias="+$(uac_req(ouri){uri.host})+"~"+$(uac_req(ouri){uri.port})+"~1";
			}
			xlog("  Unregistering $uac_req(ruri);$var(alias)\n");
			setdebug("9");
			ipsec_destroy("location");
			pcscf_unregister("location", "$uac_req(ruri);$var(alias)", "$(uac_req(ouri){uri.host})", "$(uac_req(ouri){uri.port})");
			resetdebug();
			$sht(natping=>$uac_req(ouri)) = $null;
			$sht(natpingfail=>$uac_req(ouri)) = $null;
		}
	} else {
		$sht(natpingfail=>$uac_req(ouri)) = $null;
	}
}

event_route[htable:expired:natping] {
    xlog("natping record expired $shtrecord(key) => $shtrecord(value)\n");
}

event_route[htable:mod-init] {
	xlog("event_route[htable:mod-init] {\n");
}


route[preload_pcscf] {
	if ($shv(preload_pcscf) == 1) return;
	$shv(preload_pcscf) = 1;
}

include_file "route/register.cfg"
include_file "route/rtp.cfg"
include_file "route/mo.cfg"
include_file "route/mt.cfg"